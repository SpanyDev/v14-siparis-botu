const { Main } = require("../../../Utilities/Settings/config.js");
const {
  Events,
  ModalBuilder,
  TextInputBuilder,
  TextInputStyle,
  ActionRowBuilder,
  Colors,
  EmbedBuilder,
  ButtonBuilder,
  ButtonStyle,
  time,
  PermissionsBitField,
} = require("discord.js");
const pSchema = require("../../../Utilities/Database/Product");
const { Paginator } = require("paginated.embed");

module.exports = {
  name: Events.InteractionCreate,
  async start(client, interaction) {
    if (!interaction.isButton()) return;
    const guildData = await pSchema.findOne({ GuildID: interaction.guild.id });

    if (interaction.customId === "productAdd") {
      if (
        !interaction.member.permissions.has(
          PermissionsBitField.Flags.Administrator
        )
      ) {
        return interaction.reply({
          content:
            "Bu komutu kullanmak iÃ§in yÃ¶netici yetkisine sahip olmalÄ±sÄ±nÄ±z.",
          ephemeral: true,
        });
      }

      const modal = new ModalBuilder()
        .setCustomId("productAddModal")
        .setTitle("ÃœrÃ¼n Ekle");

      modal.addComponents(
        new ActionRowBuilder().addComponents(
          new TextInputBuilder()
            .setCustomId("productName")
            .setLabel("ÃœrÃ¼n AdÄ±")
            .setPlaceholder("ÃœrÃ¼n adÄ±nÄ± giriniz.")
            .setRequired(true)
            .setStyle(TextInputStyle.Short)
        ),
        new ActionRowBuilder().addComponents(
          new TextInputBuilder()
            .setCustomId("productDesc")
            .setLabel("ÃœrÃ¼n AÃ§Ä±klamasÄ±")
            .setPlaceholder("ÃœrÃ¼n aÃ§Ä±klamasÄ±nÄ± giriniz.")
            .setMinLength(0)
            .setMaxLength(150)
            .setStyle(TextInputStyle.Paragraph)
        ),
        new ActionRowBuilder().addComponents(
          new TextInputBuilder()
            .setCustomId("productPrice")
            .setLabel("ÃœrÃ¼n FiyatÄ±")
            .setPlaceholder("ÃœrÃ¼n fiyatÄ±nÄ± giriniz.")
            .setRequired(true)
            .setStyle(TextInputStyle.Short)
        )
      );

      await interaction.showModal(modal);
    }

    if (interaction.customId === "productDelete") {
      if (
        !interaction.member.permissions.has(
          PermissionsBitField.Flags.Administrator
        )
      ) {
        return interaction.reply({
          content:
            "Bu komutu kullanmak iÃ§in yÃ¶netici yetkisine sahip olmalÄ±sÄ±nÄ±z.",
          ephemeral: true,
        });
      }

      const modal = new ModalBuilder()
        .setCustomId("productDeleteModal")
        .setTitle("ÃœrÃ¼n Sil");

      modal.addComponents(
        new ActionRowBuilder().addComponents(
          new TextInputBuilder()
            .setCustomId("productCode")
            .setLabel("ÃœrÃ¼n Kodu")
            .setPlaceholder("ÃœrÃ¼n kodunu giriniz.")
            .setRequired(true)
            .setStyle(TextInputStyle.Short)
        )
      );

      await interaction.showModal(modal);
    }

    if (interaction.customId === "productView") {
      if (
        !interaction.member.permissions.has(
          PermissionsBitField.Flags.Administrator
        )
      ) {
        return interaction.reply({
          content:
            "Bu komutu kullanmak iÃ§in yÃ¶netici yetkisine sahip olmalÄ±sÄ±nÄ±z.",
          ephemeral: true,
        });
      }

      const modal = new ModalBuilder()
        .setCustomId("productViewModal")
        .setTitle("ÃœrÃ¼n GÃ¶rÃ¼ntÃ¼le");

      modal.addComponents(
        new ActionRowBuilder().addComponents(
          new TextInputBuilder()
            .setCustomId("productCode")
            .setLabel("ÃœrÃ¼n Kodu")
            .setPlaceholder("ÃœrÃ¼n kodunu giriniz.")
            .setRequired(true)
            .setStyle(TextInputStyle.Short)
        )
      );

      await interaction.showModal(modal);
    }
    if (interaction.customId === "productList") {
      if (
        !interaction.member.permissions.has(
          PermissionsBitField.Flags.Administrator
        )
      ) {
        return interaction.reply({
          content:
            "Bu komutu kullanmak iÃ§in yÃ¶netici yetkisine sahip olmalÄ±sÄ±nÄ±z.",
          ephemeral: true,
        });
      }

      await interaction.deferReply();

      if (
        !guildData ||
        !guildData.products ||
        guildData.products.length === 0
      ) {
        return interaction.reply({
          content: "Bu sunucuda herhangi bir Ã¼rÃ¼n bulunamadÄ±.",
          ephemeral: true,
        });
      }

      const products = guildData.products;

      const embeds = products.map((product, index) => {
        return {
          author: {
            name: `ÃœrÃ¼n ${index + 1}: ${product.productName}`,
            iconURL: client.user.displayAvatarURL(),
          },
          description: `ðŸ“‹ ${product.productDescription}`,
          footer: {
            text: `ÃœrÃ¼n ID: ${product.productId}`,
          },
          fields: [
            {
              name: "ðŸ’µ Fiyat",
              value: `${product.productPrice}â‚º`,
              inline: true,
            },
            {
              name: "ðŸ“¦ Stok",
              value: `${product.stocks.length} adet`,
              inline: true,
            },
            {
              name: "ðŸ“… Eklenme Tarihi",
              value: `${time(
                Math.floor(new Date(product.productDate).getTime() / 1000),
                "D"
              )}`,
              inline: true,
            },
          ],
        };
      });

      const paginator = new Paginator()
        .addStrings(embeds)
        .setEmbedColor(Colors.Blue)
        .setButtons({
          firstPage: { style: ButtonStyle.Primary },
          previous: { style: ButtonStyle.Primary },
          next: { style: ButtonStyle.Primary },
          lastPage: { style: ButtonStyle.Primary },
        })
        .setTimestamp();

      await paginator.create(interaction, Paginator.Type.InteractionEditReply);
    }

    if (interaction.customId.startsWith("productDelivery")) {
      if (
        !interaction.member.permissions.has(
          PermissionsBitField.Flags.Administrator
        )
      ) {
        return interaction.reply({
          content:
            "Bu komutu kullanmak iÃ§in yÃ¶netici yetkisine sahip olmalÄ±sÄ±nÄ±z.",
          ephemeral: true,
        });
      }

      const modal = new ModalBuilder()
        .setCustomId("productDeliveryModal")
        .setTitle("ÃœrÃ¼n Teslim");

      modal.addComponents(
        new ActionRowBuilder().addComponents(
          new TextInputBuilder()
            .setCustomId("productCode")
            .setLabel("ÃœrÃ¼n Kodu")
            .setPlaceholder("ÃœrÃ¼n kodunu giriniz.")
            .setRequired(true)
            .setStyle(TextInputStyle.Short)
        ),
        new ActionRowBuilder().addComponents(
          new TextInputBuilder()
            .setCustomId("productCount")
            .setLabel("ÃœrÃ¼n SayÄ±sÄ±")
            .setPlaceholder("Teslim edilecek Ã¼rÃ¼n sayÄ±sÄ±nÄ± giriniz.")
            .setRequired(true)
            .setStyle(TextInputStyle.Short)
        )
      );

      await interaction.showModal(modal);
    }

    if (interaction.customId.startsWith("productDelete_")) {
      if (
        !interaction.member.permissions.has(
          PermissionsBitField.Flags.Administrator
        )
      ) {
        return interaction.reply({
          content:
            "Bu komutu kullanmak iÃ§in yÃ¶netici yetkisine sahip olmalÄ±sÄ±nÄ±z.",
          ephemeral: true,
        });
      }

      const productId = Number(interaction.customId.split("_")[1]);
      const product = guildData.products.find(
        (product) => product.productId === productId
      );

      if (!product) {
        return interaction.reply({
          content: "Belirtilen Ã¼rÃ¼n bulunamadÄ±.",
          ephemeral: true,
        });
      }

      const embed = new EmbedBuilder()
        .setColor(Colors.Blue)
        .setAuthor({
          name: "ÃœrÃ¼n Silme",
          iconURL: client.user.displayAvatarURL(),
        })
        .setDescription(`> **${product.productName}** AdlÄ± Ã¼rÃ¼n silindi.`)
        .setFooter({
          text: `ÃœrÃ¼n ID: ${product.productId}`,
        });

      const productChannel = client.channels.cache.get(
        guildData.productChannel
      );

      const msg = await productChannel.messages.fetch(product.messageId);
      if (msg) {
        await msg.delete();
      }

      guildData.products = guildData.products.filter(
        (product) => product.productId !== productId
      );
      await guildData.save();

      await interaction.reply({
        embeds: [embed],
        ephemeral: true,
      });
    }

    if (interaction.customId.startsWith("productStockAdd_")) {
      if (
        !interaction.member.permissions.has(
          PermissionsBitField.Flags.Administrator
        )
      ) {
        return interaction.reply({
          content:
            "Bu komutu kullanmak iÃ§in yÃ¶netici yetkisine sahip olmalÄ±sÄ±nÄ±z.",
          ephemeral: true,
        });
      }

      const productId = Number(interaction.customId.split("_")[1]);
      const product = guildData.products.find(
        (product) => product.productId === productId
      );

      if (!product) {
        return interaction.reply({
          content: "Belirtilen Ã¼rÃ¼n bulunamadÄ±.",
          ephemeral: true,
        });
      }

      const modal = new ModalBuilder()
        .setCustomId(`productStockAddModal_${productId}`)
        .setTitle("Stok Ekle")

        .addComponents(
          new ActionRowBuilder().addComponents(
            new TextInputBuilder()
              .setCustomId("productStocks")
              .setLabel("Stok Ekle")
              .setPlaceholder(
                "StoklarÄ± virgÃ¼lle ayÄ±rarak girin. (Ã¼rÃ¼n:ÅŸifre, Ã¼rÃ¼n, ÅŸifre)"
              )
              .setRequired(true)
              .setStyle(TextInputStyle.Paragraph)
          )
        );

      await interaction.showModal(modal);
    }

    if (interaction.customId.startsWith("productStockReset_")) {
      if (
        !interaction.member.permissions.has(
          PermissionsBitField.Flags.Administrator
        )
      ) {
        return interaction.reply({
          content:
            "Bu komutu kullanmak iÃ§in yÃ¶netici yetkisine sahip olmalÄ±sÄ±nÄ±z.",
          ephemeral: true,
        });
      }

      const productId = Number(interaction.customId.split("_")[1]);
      const product = guildData.products.find(
        (product) => product.productId === productId
      );

      if (!product) {
        return interaction.reply({
          content: "Belirtilen Ã¼rÃ¼n bulunamadÄ±.",
          ephemeral: true,
        });
      }

      const embed = new EmbedBuilder()
        .setColor(Colors.Blue)
        .setAuthor({
          name: "Stok SÄ±fÄ±rlama",
          iconURL: client.user.displayAvatarURL(),
        })
        .setTitle(`${product.productName}`)
        .setDescription(`> ÃœrÃ¼n stoklarÄ± sÄ±fÄ±rlandÄ±!`)
        .setFooter({
          text: `ÃœrÃ¼n ID: ${product.productId}`,
        });

      product.stocks = [];
      await guildData.save();

      await interaction.reply({
        embeds: [embed],
        ephemeral: true,
      });
    }

    if (interaction.customId.startsWith("productStockView_")) {
      if (
        !interaction.member.permissions.has(
          PermissionsBitField.Flags.Administrator
        )
      ) {
        return interaction.reply({
          content:
            "Bu komutu kullanmak iÃ§in yÃ¶netici yetkisine sahip olmalÄ±sÄ±nÄ±z.",
          ephemeral: true,
        });
      }

      const productId = Number(interaction.customId.split("_")[1]);
      const product = guildData.products.find(
        (product) => product.productId === productId
      );

      if (!product) {
        return interaction.reply({
          content: "Belirtilen Ã¼rÃ¼n bulunamadÄ±.",
          ephemeral: true,
        });
      }

      const embed = new EmbedBuilder()
        .setColor(Colors.Blue)
        .setAuthor({
          name: "Stoklar",
          iconURL: client.user.displayAvatarURL(),
        })
        .setTitle(`${product.productName} AdlÄ± ÃœrÃ¼n StoklarÄ±`)
        .setDescription(
          `\`\`\`${
            product.stocks.map((stock) => `${stock}`).join(", ") || "Stok yok!"
          }\`\`\``
        )
        .setFooter({
          text: `ÃœrÃ¼n ID: ${product.productId}`,
        });

      await interaction.reply({
        embeds: [embed],
        ephemeral: true,
      });
    }
  },
};
